=== ext 包

==== @Extensible
可扩展标识。默认单例、不需要扩展点编码。

==== @Extension
扩展点标识。主要标识有扩展点名字、扩展点编码、优先级排序、排斥其它扩展。

被该注解标识的类会被sofa RPC加载，并且被注入在框架的不同位置。完成特定扩展的功能。

==== ExtensionClass
扩展接口实现类。包含扩展类的元信息描述。

持有一个对象实例单例。加载和实例化的过程实际上就是一个线程安全的单例模式。

==== ExtensionLoader
扩展接口实现类加载器。包含扩展接口类的元信息描述。

构建过程： +
1、如果应用处于关闭过程中（`RpcRunningState.isShuttingDown()`），则空构造。

2、如果扩展点接口类为空，既不是接口，也不是抽象类，则抛出异常。

3、如果接口类没有 `@Extensible` ，则抛出异常。

4、加载扩展点加载的路径（由配置文件中 `extension.load.path` 配置），默认如果不指定文件名字，就是接口名。

TIP: 加载扩展点文件过程是读取源文件内容，只是解析出别名和类名。然后通过类名反射加载出class信息。 +
得到class信息后，再分析 `@Extension` 注解信息，按照这些信息构建 `ExtensionClass`。 +
这里又有几个问题： +
1、就为了得到类名却要遍历源文件的所有内容，效率低下。 +
2、整个加载的过程是同步的，目前也不知道可不可以异步加载。

5、如果加载成功则回调监听器 `ExtensionLoaderListener`。

==== ExtensionLoaderFactory
ExtensionLoader工厂类。实例化 `ExtensionLoader` 的过程实际上也是一个线程安全的单例模式。

==== ExtensionLoaderListener
扩展点加载监听类。当扩展点加载时，可以做一些事情，例如解析code，初始化等动作。
