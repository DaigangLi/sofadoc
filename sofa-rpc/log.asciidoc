=== log 包

==== Logger
sofa抽象的日志接口。与标准的日志接口基本一致。

==== LoggerFactory
日志工厂类。主要通过配置 `logger.impl` （默认：`com.alipay.sofa.rpc.log.SLF4JLoggerImpl`）来实例化日志实现类。

NOTE: 日志实现，日志早于配置加载，所以不能适应Extension机制

==== LogCodes
日志编码类，国际化日志需要不同的语言切换，所以代码层面只关心日志编码，通过编码拿到具体的日志内容。

编码规则： +
列：RPC-01001 +
规则：插件名(-) | 日志版本(1位) | 日志级别(1位) | 日志码(3位)

.日志级别
[cols="4,8",align="center",frame="topbot",options="header"]
|==========================
|日志级别code|说明
|0|普通日志输出。
|1|业务警告：这类日志一般是业务使用不当时的输出，比如不推荐使用哪些接口、发现业务潜在的风险时，打印的日志。业务开发人员需要知道这样的输出，并能正确解决
|2|业务错误：这类日志一般是业务异常时的输出，当出现这个日志时，系统的某个服务可能会不可用，或者状态异常。业务开发人员需要知道这样的输出，并能正确解决
|3|框架警告：这类日志一般是框架内部警告，出现这个日志时应该不影响业务使用，但是会存在潜在的风险，业务开发人员应该需要联系框架同学分析
|4|框架错误：这类日志一般是框架内部异常，出现这个日志时，业务开发人员应该难以解决，需要联系框架同学
|9|debug日志
|==========================

.日志码（3位目前够用了，如果要增加到4位的话，直接改日志码版本吧）
[cols="4,8",align="center",frame="topbot",options="header"]
|==========================
|日志码code|说明
|0|通用
|1|代理层
|2|路由层
|3|服务调用
|4|TR
|==========================

构建流程： +
1、通过本地语言、读取对应的sofa-rpc/logcodes-common_*.properties文件，转化为 Properties 对象。

2、目前只有中英文的支持，如果没有找到对应语言的日志定义文件则使用英文版本。

TIP: 实际上这对于国际化不太有扩展性。如果要增加一个日语版本的，由于限定死的路径，所以不能实现。

==== LogCodeNotFoundException

==== LogFormatException
